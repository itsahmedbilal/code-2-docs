// clearfix
@mixin clearfix {
	&:after {
	  content: " ";
	  display: block;
	  clear: both;
	}
  }
  
  // reset for list
  @mixin listreset {
	margin: 0;
	padding: 0;
	list-style: none;
  }
  
  // link color
  @mixin link-color($color) {
	color: $color;
	&:hover, &:active, &:focus {
	  color: lighten($color, 25%);
	  text-decoration: none;
	}
  }
  
  // resposive image
  @mixin responsive-img{
	display: block;
	width: 100%;
	height: auto;
  }
  
  // resposive image
  @mixin response-img{
	display: block;
	max-width: 100%;
	height: auto;
  }
  
  @mixin background-opacity($color, $opacity: 0.3) {
	  background: $color; /* The Fallback */
	  background: rgba($color, $opacity);
  }
  
  
  @mixin element($element, $top, $right, $bottom, $left){
	position: relative;
	&:#{$element} {
	  position: absolute;
	  content: "";
	  top:$top;
	  bottom:$bottom;
	  left:$left;
	  right:$right;
	}
  }
  
  // custom font mixin
  @mixin fontface ($fontfamily, $filename, $fontweight: normal, $fontstyle: normal) {
	font-family: $fontfamily;
	src:url('../fonts/#{$filename}.eot');
	src:url('../fonts/#{$filename}.eot?#iefix') format('embedded-opentype'),
	  url('../fonts/#{$filename}.woff') format('woff'),
	  url('../fonts/#{$filename}.ttf') format('truetype'),
	  url('../fonts/#{$filename}.svg#{$filename}') format('svg');
	font-weight: $fontweight;
	font-style: $fontstyle;
  }
  
  @mixin rgba-background($hexcolor, $opacity) {
	background-color: $hexcolor;
	background-color: rgba($hexcolor, $opacity);
  }
  
  // vertical align style
  @mixin align($display: inline-block, $align: top){
	display:$display;
	vertical-align:$align;
  }
  
  // Box Sizing
  @mixin box-sizing{
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
  }
  
  // Sizing shortcuts
  @mixin size($width, $height) {
	width: $width;
	height: $height;
  }
  // square mixin
  @mixin square($size) {
	@include size($size, $size);
  }
  
  // hide text
  @mixin hide-text {
	overflow: hidden;
	text-indent: -9999px;
  }
  @mixin text-hide {
	overflow: hidden;
	text-indent: 9999px;
  }
  
  // bottom links' border
  @mixin link-border($color) {
	border-bottom: 1px solid lighten($color, 25%);
	&:hover, &:active, &:focus {
	  border-color: lighten($color, 30%);
	  text-decoration: none;
	}
  }
  
  // some CSS3 style
  @mixin css3($property, $value) {
	@each $prefix in -webkit-, -moz-, '' {
		#{$prefix}#{$property}: $value;
	}
  }
  
  // box shadow
  // sample: @include box-shadow(2px 2px 5px rgba(255,0,0,0.6));
  @mixin box-shadow($shadows...) {
	  -webkit-box-shadow: $shadows;
	  -moz-box-shadow: $shadows;
	  -ms-box-shadow: $shadows;
	  box-shadow: $shadows;
  }
  
  @mixin rgba-color($color, $opacity) {
   color: $color;
   color: rgba($color, $opacity);
  }
  
  // opacity
  @mixin opacity($opacity) {
	opacity: $opacity;
	$opacityIE: $opacity * 100;
	filter: alpha(opacity=$opacityIE);
  }
  
  // font size rem
  @mixin fontsize($size: 24, $base: 16) {
	font-size: $size + px;
	font-size: ($size / $base) * 1rem;
  }
  
  // placeholder
  @mixin placeholder {
	::-webkit-input-placeholder {@content}
	::-moz-placeholder          {opacity: 1; @content}
	:-moz-placeholder          {@content}
	:-ms-input-placeholder      {@content}
	.placeholder                {@content}
  }
  
  // placeholder
  @mixin placeholder($color: $input-color-placeholder) {
   &:-moz-placeholder    { color: $color; opacity: 1; }
   &::-moz-placeholder    { color: $color; opacity: 1; }
   &:-ms-input-placeholder   { color: $color; }
   &::-webkit-input-placeholder { color: $color; }
  }
  
  // full width
  %full-width {
	padding-left: 9999px;
	padding-right: 9999px;
	margin-left: -9999px;
	margin-right: -9999px;
  }
  
  
  // transition
  @mixin transition ($type:all, $time:0.4s, $ease:ease) {
	-moz-transition    : $type $time $ease;
	-webkit-transition  : $type $time $ease;
	-o-transition      : $type $time $ease;
	transition          : $type $time $ease;
  }
  
  // gradient
  @mixin gradient-vertical($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
	background-image: -webkit-gradient(linear, left $start-percent, left $end-percent, from($start-color), to($end-color)); // Safari 4+, Chrome 2+
	background-image: -webkit-linear-gradient(top, $start-color, $start-percent, $end-color, $end-percent); // Safari 5.1+, Chrome 10+
	background-image:  -moz-linear-gradient(top, $start-color $start-percent, $end-color $end-percent); // FF 3.6+
	background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent); // Standard, IE10
	background-repeat: repeat-x;
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down
  }
  
  @mixin gradient-horizontal($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
	background-image: -webkit-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); // Safari 5.1-6, Chrome 10+
	background-image: -o-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); // Opera 12
	background-image: linear-gradient(to right, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
	background-repeat: repeat-x;
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down
  }
  
  @mixin transform ($deg) {
	transform        : $deg;
	-moz-transform    : $deg;
	-ms-transform    : $deg;
	-o-transform      : $deg;
	-webkit-transform : $deg;
  }
  
  @mixin scale ($multiplier) {
	transform        : scale($multiplier);
	-moz-transform    : scale($multiplier);
	-ms-transform    : scale($multiplier);
	-o-transform      : scale($multiplier);
	-webkit-transform : scale($multiplier);
  }
  
  @mixin rotate ($deg) {
	-moz-transform    : rotate($deg);
	-ms-transform    : rotate($deg);
	-o-transform      : rotate($deg);
	-webkit-transform : rotate($deg);
  }
  
  @mixin skew ($deg, $deg2) {
	transform        : skew($deg, $deg2);
	-moz-transform    : skew($deg, $deg2);
	-ms-transform    : skew($deg, $deg2);
	-o-transform      : skew($deg, $deg2);
	-webkit-transform : skew($deg, $deg2);
  }
  
  @mixin font-size ($font-size, $line-height){
   font-size: $font-size;
   line-height: $line-height;
  }
  
  
  // from http://codepen.io/MichaelArestad/pen/IxFGj
  @mixin arrow-lazy($al-direction: top, $al-size: 10px, $al-color: #ccc, $al-center: 50%, $al-margin: -1px, $al-pseudo: before){
	position: relative;
	border-color: $al-color;
  
	&:#{$al-pseudo} {
	  position: absolute;
	  content: "";
	  width: 0;
	  height: 0;
	  border-color: $al-color;
  
	  @if $al-direction == "right" {
		  top: $al-center;
		  left: 100%;
		  margin-left: $al-margin;
		  margin-top: $al-size * -1;
		  border-top: $al-size solid transparent;
		  border-bottom: $al-size solid transparent;
		  border-left: $al-size solid $al-color;
		  border-left-color: inherit;
	  } @else if $al-direction == "down" {
		  top: 100%;
		  left: $al-center;
		  margin-top: $al-margin;
		  margin-left: $al-size * -1;
		  border-left: $al-size solid transparent;
		  border-right: $al-size solid transparent;
		  border-top: $al-size solid $al-color;
		  border-top-color: inherit;
	  } @else if $al-direction == "left" {
		  top: $al-center;
		  right: 100%;
		  margin-right: $al-margin;
		  margin-top: $al-size * -1;
		  border-top: $al-size solid transparent;
		  border-bottom: $al-size solid transparent;
		  border-right:$al-size solid $al-color;
		  border-right-color: inherit;
	  } @else {
		  bottom: 100%;
		  left: $al-center;
		  margin-bottom: $al-margin;
		  margin-left: $al-size * -1;
		  border-left: $al-size solid transparent;
		  border-right: $al-size solid transparent;
		  border-bottom: $al-size solid $al-color;
		  border-bottom-color: inherit;
	  }
	}
  }
  
  //retina mixin
  @mixin img-retina($image, $extension, $width, $height) {
   @media (min--moz-device-pixel-ratio: 1.3),
   (-o-min-device-pixel-ratio: 2.6/2),
   (-webkit-min-device-pixel-ratio: 1.3),
   (min-device-pixel-ratio: 1.3),
   (min-resolution: 1.3dppx) {
	background-image: url('../images/' + $image + '-2x' + '.' + $extension);
	background-size: $width $height;
   }
  }
  
  // alignment
  @mixin alignment($display, $alignment) {
	display: $display;
	vertical-align: $alignment;
  }
  
  @mixin box-sizing($value: border-box) {
	box-sizing: $value;
	-moz-box-sizing: $value;
	-webkit-box-sizing: $value;
  }
  
  /// Animate css properties
  // usage
  // scss - @include animate(color);
  //     or @include animate(color width);
  //     or @include animate(color width, 1s, linear);
  //
  $animation-speed: .3s !default;
  $default-easing: linear !default;
  
  @mixin animate($properties, $duration: $animation-speed, $easing: $default-easing) {
	$list:();
	@each $prop in $properties {
	  $str: #{$prop} #{$duration} #{$easing};
	  $list: join($list, #{$str}, comma);
	}
	transition: $list;
  }
  
  @mixin flex($display:flex, $flex-direction: row, $flex-wrap: wrap, $align-items: center, $justify-content: center, $align-content: center) {
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	align-items: center;
	justify-content: center;
	align-content: center;
  }
  
  // font size
  @mixin fontsize($font-size, $line-height) {
	font-size: $font-size;
	line-height: $line-height;
  }
  
  // img-responsive
  @mixin img-style {
	display: block;
	width: 100%;
	height: auto;
  }
  
  // mixin for position
  @mixin position (){
	position: absolute;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
  }
  